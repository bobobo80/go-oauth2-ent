// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/bobobo80/go-oauth2-ent/ent/oauthtoken"
)

// OAuthToken is the model entity for the OAuthToken schema.
type OAuthToken struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ExpiredAt holds the value of the "expired_at" field.
	ExpiredAt time.Time `json:"expired_at,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Access holds the value of the "access" field.
	Access string `json:"access,omitempty"`
	// Refresh holds the value of the "refresh" field.
	Refresh string `json:"refresh,omitempty"`
	// Data holds the value of the "data" field.
	Data string `json:"data,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OAuthToken) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oauthtoken.FieldID:
			values[i] = new(sql.NullInt64)
		case oauthtoken.FieldCode, oauthtoken.FieldAccess, oauthtoken.FieldRefresh, oauthtoken.FieldData:
			values[i] = new(sql.NullString)
		case oauthtoken.FieldExpiredAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OAuthToken", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OAuthToken fields.
func (ot *OAuthToken) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oauthtoken.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ot.ID = int(value.Int64)
		case oauthtoken.FieldExpiredAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expired_at", values[i])
			} else if value.Valid {
				ot.ExpiredAt = value.Time
			}
		case oauthtoken.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				ot.Code = value.String
			}
		case oauthtoken.FieldAccess:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access", values[i])
			} else if value.Valid {
				ot.Access = value.String
			}
		case oauthtoken.FieldRefresh:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field refresh", values[i])
			} else if value.Valid {
				ot.Refresh = value.String
			}
		case oauthtoken.FieldData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value.Valid {
				ot.Data = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this OAuthToken.
// Note that you need to call OAuthToken.Unwrap() before calling this method if this OAuthToken
// was returned from a transaction, and the transaction was committed or rolled back.
func (ot *OAuthToken) Update() *OAuthTokenUpdateOne {
	return NewOAuthTokenClient(ot.config).UpdateOne(ot)
}

// Unwrap unwraps the OAuthToken entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ot *OAuthToken) Unwrap() *OAuthToken {
	_tx, ok := ot.config.driver.(*txDriver)
	if !ok {
		panic("ent: OAuthToken is not a transactional entity")
	}
	ot.config.driver = _tx.drv
	return ot
}

// String implements the fmt.Stringer.
func (ot *OAuthToken) String() string {
	var builder strings.Builder
	builder.WriteString("OAuthToken(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ot.ID))
	builder.WriteString("expired_at=")
	builder.WriteString(ot.ExpiredAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(ot.Code)
	builder.WriteString(", ")
	builder.WriteString("access=")
	builder.WriteString(ot.Access)
	builder.WriteString(", ")
	builder.WriteString("refresh=")
	builder.WriteString(ot.Refresh)
	builder.WriteString(", ")
	builder.WriteString("data=")
	builder.WriteString(ot.Data)
	builder.WriteByte(')')
	return builder.String()
}

// OAuthTokens is a parsable slice of OAuthToken.
type OAuthTokens []*OAuthToken
